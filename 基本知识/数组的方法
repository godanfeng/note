1、push()
  向数组的末尾添加新内容，返回值：新增后数组的长度
  let ary1 = [12,34,26];
  ary1.push(100); //返回一个新的长度 

2、pop()
  删除数组的最后一项，返回值：被删除的项
  let ary2 = [108,112,39,10];
  ary2.pop();//删除的最后一项为10
  
3、shift()
  删除数组的第一项，返回值：被删除的项
  let ary3 = [0,108,112,39];
  ary3.shift();//删除的第一项为0
  
4、unshift()
  向数组首位添加新内容，返回值：新数组的长度
  let ary4 = ['c','d'];
  ary4.unshift('a','b');
  console.log(ary4);//["a", "b", "c", "d"]
  
5、slice()
  按照条件查找出其中的部分内容，返回值：返回一个新数组
  array.slice(n, m)，从索引n开始查找到m处（不包含m）
  array.slice(n) 第二个参数省略，则一直查找到末尾
  array.slice(0)原样输出内容，可以实现数组克隆
  array.slice(-n,-m) slice支持负参数，从最后一项开始算起，-1为最后一项，-2为倒数第二项
  
6、splice()
  对数组进行增删改
  增加：ary.splice(n,0,m)从索引n开始删除0项，把m或者更多的内容插入到索引n的前面返回空数组
  修改：ary.splice(n,x,m)从索引n开始删除x个，m替换删除的部分
  把原有内容删除掉，然后用新内容替换掉
  删除：ary.splice(n,m) 从索引n开始删除m个内容（如果第二个参数省略，则从n删除到末尾）
  返回删除的新数组，原有数组改变
  
7、join()
  用指定的分隔符将数组每一项拼接为字符串，返回值：拼接好的字符串
  let ary7 = [1,2,3];
  console.log(ary7.join('、'));//1、2、3
  是否改变原数组：不改变
  
8、concat()
  用于连接两个或多个数组，返回值：返回连接后的新数组
  是否改变原数组：不改变
  let ary8 = ['你'];
  let ary80 = ary8.concat('好');
  console.log(ary80);//["你", "好"]
  
9、indexOf()
  检测当前值在数组中第一次出现的位置索引
  参数：array.indexOf(item,start) item:查找的元素 start:字符串中开始检索的位置
  返回值：第一次查到的索引，未找到返回-1
  是否改变原数组：不改变
  let ary9 = ['a','b','c','d','e','a','f'];   
  console.log(ary9.indexOf('c'));//2
  console.log(ary9.indexOf('a',3))//5
  
10、lastIndexOf()
  检测当前值在数组中最后一次出现的位置索引，返回值：第一次查到的索引，未找到返回-1
  参数：array.lastIndexOf(item,start) item:查找的元素 start:字符串中开始检索的位置

11、includes()
  判断一个数组是否包含一个指定的值，返回值：布尔值
  是否改变原数组：不改变
  let ary13 = ['a','b','c','d']; 
  console.log(ary13.includes('c'));//true
  console.log(ary13.includes(2));//false

12、sort()
  对数组的元素进行排序（默认是从小到大来排序 并且是根据字符串来排序的），返回值：排序后新数组
  sort在不传递参数情况下，只能处理10以内（个位数）数字排序
  let ary11 = [32,44,23,54,90,12,9]; 
  ary11.sort(function(a,b){        // return a-b;  // 结果[9, 12, 23, 32, 44, 54, 90]
       // return b-a;  // 结果[90, 54, 44, 32, 23, 12, 9]   })  
   console.log(ary11);
   
13、reverse()
  把数组倒过来排列，返回值：倒序后新数组
  let ary12 = [6,8,10,12];
  console.log(ary12.reverse());//[12, 10, 8, 6]

