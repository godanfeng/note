{"ast":null,"code":"import \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.error.cause.js\";\nimport axios from \"axios\"; //引入进度条\n\nimport nprogress from 'nprogress'; //引入进度条样式\n\nimport \"nprogress/nprogress.css\"; //1、对axios二次封装\n\nvar requests = axios.create({\n  //基础路径，requests发出的请求在端口号后面会跟改baseURl\n  baseURL: '/api',\n  timeout: 5000\n}); //2、配置请求拦截器\n\nrequests.interceptors.request.use(function (config) {\n  //config内主要是对请求头Header配置\n  //比如添加token\n  //开启进度条\n  nprogress.start();\n  return config;\n}); //3、配置相应拦截器\n\nrequests.interceptors.response.use(function (res) {\n  //成功的回调函数\n  //响应成功，关闭进度条\n  nprogress.done();\n  return res.data;\n}, function (error) {\n  //失败的回调函数\n  console.log(\"响应失败\" + error);\n  return Promise.reject(new Error('fail'));\n}); //4、对外暴露\n\nexport default requests;","map":{"version":3,"sources":["D:/vscode/code/SHP/app/src/api/request.js"],"names":["axios","nprogress","requests","create","baseURL","timeout","interceptors","request","use","config","start","response","res","done","data","error","console","log","Promise","reject","Error"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB,C,CACA;;AACA,OAAOC,SAAP,MAAsB,WAAtB,C,CACA;;AACA,OAAO,yBAAP,C,CACA;;AACA,IAAMC,QAAQ,GAAGF,KAAK,CAACG,MAAN,CAAa;AAC1B;AACAC,EAAAA,OAAO,EAAC,MAFkB;AAG1BC,EAAAA,OAAO,EAAE;AAHiB,CAAb,CAAjB,C,CAKA;;AACAH,QAAQ,CAACI,YAAT,CAAsBC,OAAtB,CAA8BC,GAA9B,CAAkC,UAAAC,MAAM,EAAI;AACxC;AACA;AAEA;AACAR,EAAAA,SAAS,CAACS,KAAV;AACA,SAAOD,MAAP;AACH,CAPD,E,CAQA;;AACAP,QAAQ,CAACI,YAAT,CAAsBK,QAAtB,CAA+BH,GAA/B,CAAmC,UAACI,GAAD,EAAS;AACxC;AAEA;AACAX,EAAAA,SAAS,CAACY,IAAV;AACA,SAAQD,GAAG,CAACE,IAAZ;AACH,CAND,EAME,UAACC,KAAD,EAAW;AACT;AACAC,EAAAA,OAAO,CAACC,GAAR,CAAY,SAAOF,KAAnB;AACA,SAAOG,OAAO,CAACC,MAAR,CAAe,IAAIC,KAAJ,CAAU,MAAV,CAAf,CAAP;AACH,CAVD,E,CAWA;;AACA,eAAelB,QAAf","sourcesContent":["import axios from \"axios\";\r\n//引入进度条\r\nimport nprogress from 'nprogress';\r\n//引入进度条样式\r\nimport \"nprogress/nprogress.css\";\r\n//1、对axios二次封装\r\nconst requests = axios.create({\r\n    //基础路径，requests发出的请求在端口号后面会跟改baseURl\r\n    baseURL:'/api',\r\n    timeout: 5000,\r\n})\r\n//2、配置请求拦截器\r\nrequests.interceptors.request.use(config => {\r\n    //config内主要是对请求头Header配置\r\n    //比如添加token\r\n\r\n    //开启进度条\r\n    nprogress.start();\r\n    return config;\r\n})\r\n//3、配置相应拦截器\r\nrequests.interceptors.response.use((res) => {\r\n    //成功的回调函数\r\n\r\n    //响应成功，关闭进度条\r\n    nprogress.done()\r\n    return  res.data;\r\n},(error) => {\r\n    //失败的回调函数\r\n    console.log(\"响应失败\"+error)\r\n    return Promise.reject(new Error('fail'))\r\n})\r\n//4、对外暴露\r\nexport default requests;\r\n"]},"metadata":{},"sourceType":"module"}