一、Vuex是什么
  概念:专门在Vue 中实现集中式状态(数据）管理的一个Vue插件，对Vue应用中多个组件的共享状态进行集中式的管理(读/写），也是一种组件间通信的方式，且适用于任意组件间通信
  
二、什么时候使用Vuex
  1.多个组件依赖于同—状态
  2．来自不同组件的行为需要变更同—状态

三、Vuex的基本使用
  1．初始化数据state，配置actions . mutations，操作文件store.js
  2．组件中读取vuex中的数据$store.state.数据
  3．组件中修改vuex中的数据$store.dispatch( 'action中的方法名',数据)或$store.commit( ' mutations中的方法名·,数据)
      若没有网络请求或其他业务逻辑，组件中也可越过actions，即不写dispatch，直接编写commit
      
四、getters 配置项
  1.概念:当state 中的数据需要经过加工后再使用时，可以使用getters 加工，相当于全局计算属性（类似于computed）
  2．在store.js中追加getters 配置

五、四个map方法的使用
  1. mapstate方法:用于帮助映射state中的数据为计算属性
    computed: {
    	// 借助mapState生成计算属性：sum、school、subject（对象写法一）
    	...mapState({sum:'sum',school:'school',subject:'subject'}),
  
    	// 借助mapState生成计算属性：sum、school、subject（数组写法二）
    	...mapState(['sum','school','subject']),
    },
  2. mapGetters方法:用于帮助映射getters中的数据为计算属性
    computed: {
    //借助mapGetters生成计算属性：bigSum（对象写法一）
    ...mapGetters({bigSum:'bigSum'}),

    //借助mapGetters生成计算属性：bigSum（数组写法二）
    ...mapGetters(['bigSum'])
    },
  3. mapActions方法:用于帮助生成与actions对话的方法，即包含$store.dispatch(xxx)的函数
    methods:{
    //靠mapActions生成：incrementOdd、incrementWait（对象形式）
    ...mapActions({incrementOdd:'jiaOdd',incrementWait:'jiaWait'})

    //靠mapActions生成：incrementOdd、incrementWait（数组形式）
    ...mapActions(['jiaOdd','jiaWait'])
    }
  4. mapMutations方法:用于帮助生成与mutations对话的方法，即包含$store.commit(xxx)的函数
    methods:{
    //靠mapActions生成：increment、decrement（对象形式）
    ...mapMutations({increment:'JIA',decrement:'JIAN'}),
    
    //靠mapMutations生成：JIA、JIAN（对象形式）
    ...mapMutations(['JIA','JIAN']),
    }
    
注意: mapActions与mapNutations使用时，若需要传递参数需要:在模板中绑定事件时传递好参数，否则参数是事件对象

