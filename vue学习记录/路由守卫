作用：对路由进行权限控制
分类：全局守卫，独享守卫，组件内守卫

  1.全局守卫：
    // 全局前置守卫：初始化时、每次路由切换前执行
    router.beforeEach((to,from,next) => {
    	console.log('beforeEach',to,from)
    	if(to.meta.isAuth){ // 判断当前路由是否需要进行权限控制
    		if(localStorage.getItem('school') === 'atguigu'){ // 权限控制的具体规则
    			next()	// 放行
    		}else{
    			alert('暂无权限查看')
    		}
    	}else{
    		next()	// 放行
    	}
    })
    
    // 全局后置守卫：初始化时、每次路由切换后执行
    router.afterEach((to,from) => {
    	console.log('afterEach',to,from)
    	if(to.meta.title){ 
    		document.title = to.meta.title //修改网页的title
    	}else{
    		document.title = 'vue_test'
    	}
    })
    （//过程：
        1、请求一个路径：如：/Index
        2、经历前置守卫（路由配置前）
           决定了能去哪个路径
        3、根据去的路径，找对应component（路由配置）
        4、经过后置守卫（路由配置后）
        5、创建组件）
    
   2.独享路由守卫：
    beforeEnter(to,from,next){
  	console.log('beforeEnter',to,from)
      if(localStorage.getItem('school') === 'atguigu'){
          next()
      }else{
          alert('暂无权限查看')
      }
    }
    
   3.组件内守卫：
    //进入守卫：通过路由规则，进入该组件时被调用
    beforeRouteEnter (to, from, next) {... next()},
    // 不！能！获取组件实例 `this`
    // 因为当守卫执行前，组件实例还没被创建
    
    //离开守卫：通过路由规则，离开该组件时被调用
    beforeRouteLeave (to, from, next) {... next()},
    // 导航离开该组件的对应路由时调用
    // 可以访问组件实例 `this`
